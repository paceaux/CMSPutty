module.exports = function (grunt) {
  'use strict';

  var path = require('path'),
      util = require('util'),
      unixifyPath,
      wrap;

  grunt.registerMultiTask('wrap', 'Wrap files.', function () {

    var counter = 0,
        options;

    options = this.options({
      wrapper:   ['', ''],
      indent:    '',
      separator: grunt.util.linefeed
    });

    grunt.verbose.writeflags(options, 'Options');

    this.files.forEach(function (filePair) {

      var isExpandedPair = filePair.orig.expand || false,
          dest;

      filePair.src.forEach(function (src) {

        dest = grunt.file.isDir(filePair.dest) && !isExpandedPair
          ? unixifyPath(path.join(filePair.dest || '', src))
          : filePair.dest;

        if (grunt.file.isDir(src)) {

          grunt.file.mkdir(dest);

        } else {

          grunt.log.write('Wrapping ' + src.cyan + ' -> ' + dest.cyan + '...');

          grunt.file.write(dest, wrap(src, options));

          grunt.log.ok() && counter++;

        }

      });
    });

    grunt.log.write('Wrapped ' + counter.toString().cyan + ' files');

  });

  wrap = function (filepath, options) {

    var wrapper      = options.wrapper,
        fileContents = grunt.file.read(filepath);

    if (typeof wrapper === 'function') wrapper = wrapper(filepath, options);

    if (options.indent) {

      fileContents = fileContents.split(/\r?\n/g).map(function(line) {
        return options.indent + line;
      }).join(grunt.util.linefeed);

    }

    return wrapper[0] + options.separator + fileContents + options.separator + wrapper[1];

  };

  unixifyPath = function (filepath) {
    return process.platform === 'win32' ? filepath.replace(/\\/g, '/') : filepath;
  };

};
